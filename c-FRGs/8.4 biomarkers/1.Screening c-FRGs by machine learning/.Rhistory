geneList[[A]]=uniqGene
uniqLength=length(uniqGene)
print(paste("1",uniqLength,sep=" "))
rt=read.table(paste0(B,".txt"),header=F,sep="\t",check.names=F)
geneNames=as.vector(rt[,1])
geneNames=gsub("^ | $","",geneNames)
uniqGene=unique(geneNames)
geneList[[B]]=uniqGene
uniqLength=length(uniqGene)
print(paste("3",uniqLength,sep=" "))
rt=read.table(paste0(C,".txt"),header=F,sep="\t",check.names=F)
geneNames=as.vector(rt[,1])
geneNames=gsub("^ | $","",geneNames)
uniqGene=unique(geneNames)
geneList[[C]]=uniqGene
uniqLength=length(uniqGene)
print(paste("3",uniqLength,sep=" "))
mycol <- distinctColorPalette(3)
pdf(file="venn.pdf",width=5,height=5)
venn(geneList,col=mycol[1:length(geneList)],zcolor=mycol[1:length(geneList)],box=F)
dev.off()
intersectGenes=Reduce(intersect,geneList)
write.table(file="interGenes.txt",intersectGenes,sep="\t",quote=F,col.names=F,row.names=F)
#307686155@qq.com
#18666983305
#更多课程请关注生信碱移
#af
#展示前20个基因的重要性
af=importance[1:20,]
#引用包
library(randomForest)
library(limma)
library(ggpubr)
set.seed(111)
inputFile="normalize.txt"       #输入文件
#读取输入文件
rt=read.table(inputFile, header=T, sep="\t", check.names=F)
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
data=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
data=avereps(data)
data=t(data)
data=data[,read.table("diffGenes.txt", header=F, sep="\t", check.names=F)[,1]]
sample=read.table("sample.txt",sep="\t",header=F,check.names=F,row.names = 1)
data=data[rownames(sample),]
colnames(data)=gsub("-", "afaf", colnames(data))
#控制组放置最前
afcon=as.matrix(table(sample[,1]))[1,1]
afcon=as.vector(afcon)
group=c(rep("con",afcon),rep("treat",nrow(data)-afcon))
#随机森林树
rf=randomForest(as.factor(group)~., data=data, ntree=500)
pdf(file="forest.pdf", width=6, height=6)
plot(rf, main="Random forest", lwd=2)
dev.off()
#找出误差最小的点
optionTrees=which.min(rf$err.rate[,1])
optionTrees
rf2=randomForest(as.factor(group)~., data=data, ntree=optionTrees)
#查看基因的重要性
#绘制基因的重要性图
importance=importance(x=rf2)
importance=as.data.frame(importance)
importance$size=rownames(importance)
importance=importance[,c(2,1)]
names(importance)=c("Gene","importance")
#展示前20个基因的重要性
af=importance[1:20,]
View(af)
#查看基因的重要性
#绘制基因的重要性图
importance=importance(x=rf2)
View(importance)
rf2=randomForest(as.factor(group)~., data=data, ntree=optionTrees)
View(rf2)
#找出误差最小的点
optionTrees=which.min(rf$err.rate[,1])
optionTrees
rf2=randomForest(as.factor(group)~., data=data, ntree=optionTrees)
#查看基因的重要性
#绘制基因的重要性图
importance=importance(x=rf2)
importance=as.data.frame(importance)
importance$size=rownames(importance)
importance=importance[,c(2,1)]
names(importance)=c("Gene","importance")
#展示前20个基因的重要性
af=importance[1:20,]
p=ggdotchart(af, x = "Gene", y = "importance",
color = "importance", # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
add.params = list(color = "lightgray", size = 2), # Change segment color and size
dot.size = 6,                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_bw()         ,               # ggplot2 theme
rotate=TRUE                                       )#翻转坐标轴
p1=p+ geom_hline(yintercept = 0, linetype = 2, color = "lightgray")+
gradient_color(palette =c(ggsci::pal_npg()(2)[2],ggsci::pal_npg()(2)[1])      ) +#颜色
grids()
#保存图片
pdf(file="importance.pdf", width=6, height=6)
print(p1)
dev.off()
#挑选疾病特征基因
rfGenes=importance[order(importance[,"importance"], decreasing = TRUE),]
write.table(rfGenes, file="rfGenes.txt", sep="\t", quote=F, col.names=T, row.names=F)
#引用包
library(dplyr)
library(pROC)
library(ggplot2)
library(survival)
library(regplot)
library(rms)
library(ggsci)
library(survminer)
library(timeROC)
library(ggDCA)
library(limma)
inputFile="normalize.txt"       #表达矩阵
hub="interGenes.txt"        #核心基因
#读取输入文件
rt=read.table(inputFile, header=T, sep="\t", check.names=F)
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
data=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
data=avereps(data)
data=t(data)
sample=read.table("sample.txt",sep="\t",header=F,check.names=F)
colnames(sample)=c("ID","Type")
data=data[sample$ID,]
aSAH1=data[,read.table(hub, header=F, sep="\t", check.names=F)[,1]]
aSAH=cbind(sample,aSAH1)
#简单看一下ROC曲线AUC的情况
aflist=roc(Type~BRD2+CDKN1A+FZD7+GABARAPL2+SLC39A14, data = aSAH)
#简单看一下ROC曲线AUC的情况
aflist=roc(Type~CDKN1A+FZD7+GABARAPL2+SLC39A14, data = aSAH)
g3 <- ggroc(aflist, size = 1.2,alpha=.6,)
g5=g3+ggsci::scale_color_lancet()
print(g5)
#诺曼图，高度比：8比10
############逻辑回归模型
dd <- datadist(aSAH)
options(datadist="dd")
fit <- lrm(formula = Type ~ BRD2+CDKN1A+FZD7+GABARAPL2+SLC39A14, data =aSAH,“tol=1e-9”,maxit=1000)
print(fit)
fit <- lrm(formula = Type ~ BRD2+CDKN1A+FZD7+GABARAPL2+SLC39A14, data =aSAH,“tol=1e-9”,maxit=1000)
fit <- lrm(formula = Type ~ CDKN1A+FZD7+GABARAPL2+SLC39A14, data =aSAH,“tol=1e-9”,maxit=1000)
print(fit)
fit <- lrm(formula = Type ~ CDKN1A+FZD7+GABARAPL2+SLC39A14, data =aSAH,“tol=1e-9”,maxit=1000)
fit <- lrm(formula = Type ~ CDKN1A+FZD7+GABARAPL2+SLC39A14, data =aSAH)
print(fit)
coef=as.data.frame(fit$coefficients)[-1,,drop=F]
coefout=cbind(ID=rownames(coef),coef)
write.table(coefout,file="coefficients.txt",sep="\t",quote=F,row.names = F)
#绘图
pdf(file="nomogram.pdf", width=9, height=7.5)
plot(nomogram(fit,fun.at = seq(0.05,0.95,0.05)),funlabel = "nomogram model")
dev.off()
plot(regplot(fit,plots=c("density","boxes"), observation=T, title="Prediction Nomogram", clickable=T, points=TRUE,droplines=TRUE))
plot(nomogram(fit,fun.at = seq(0.05,0.95,0.05)),funlabel = "nomogram model")
dev.off()
plot(regplot(fit,plots=c("density","boxes"), observation=T, title="Prediction Nomogram", clickable=T, points=TRUE,droplines=TRUE))
plot(regplot(fit,plots=c("density","boxes"), observation=T, title="Prediction Nomogram", clickable=T, points=TRUE,droplines=TRUE))
#引用包
library(randomForest)
library(limma)
library(ggpubr)
set.seed(111)
inputFile="normalize.txt"       #输入文件
#读取输入文件
rt=read.table(inputFile, header=T, sep="\t", check.names=F)
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
data=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
data=avereps(data)
data=t(data)
data=data[,read.table("diffGenes.txt", header=F, sep="\t", check.names=F)[,1]]
sample=read.table("sample.txt",sep="\t",header=F,check.names=F,row.names = 1)
data=data[rownames(sample),]
colnames(data)=gsub("-", "afaf", colnames(data))
#控制组放置最前
afcon=as.matrix(table(sample[,1]))[1,1]
afcon=as.vector(afcon)
group=c(rep("con",afcon),rep("treat",nrow(data)-afcon))
#随机森林树
rf=randomForest(as.factor(group)~., data=data, ntree=500)
pdf(file="forest.pdf", width=6, height=6)
plot(rf, main="Random forest", lwd=2)
dev.off()
#找出误差最小的点
optionTrees=which.min(rf$err.rate[,1])
optionTrees
rf2=randomForest(as.factor(group)~., data=data, ntree=optionTrees)
#查看基因的重要性
#绘制基因的重要性图
importance=importance(x=rf2)
importance=as.data.frame(importance)
importance$size=rownames(importance)
importance=importance[,c(2,1)]
names(importance)=c("Gene","importance")
#展示前20个基因的重要性
af=importance[1:20,]
p=ggdotchart(af, x = "Gene", y = "importance",
color = "importance", # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
add.params = list(color = "lightgray", size = 2), # Change segment color and size
dot.size = 6,                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_bw()         ,               # ggplot2 theme
rotate=TRUE                                       )#翻转坐标轴
p1=p+ geom_hline(yintercept = 0, linetype = 2, color = "lightgray")+
gradient_color(palette =c(ggsci::pal_npg()(2)[2],ggsci::pal_npg()(2)[1])      ) +#颜色
grids()
#保存图片
pdf(file="importance.pdf", width=6, height=6)
print(p1)
dev.off()
#挑选疾病特征基因
rfGenes=importance[order(importance[,"importance"], decreasing = TRUE),]
write.table(rfGenes, file="rfGenes.txt", sep="\t", quote=F, col.names=T, row.names=F)
View(rfGenes)
View(rf2)
View(rf2)
View(af)
View(exp)
View(af)
View(af)
View(rf2)
View(rf)
View(p1)
View(p)
View(rfGenes)
p=ggdotchart(rfGenes, x = "Gene", y = "importance",
color = "importance", # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
add.params = list(color = "lightgray", size = 2), # Change segment color and size
dot.size = 6,                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_bw()         ,               # ggplot2 theme
rotate=TRUE                                       )#翻转坐标轴
p1=p+ geom_hline(yintercept = 0, linetype = 2, color = "lightgray")+
gradient_color(palette =c(ggsci::pal_npg()(2)[2],ggsci::pal_npg()(2)[1])      ) +#颜色
grids()
#保存图片
pdf(file="importance.pdf", width=6, height=6)
print(p1)
dev.off()
#挑选疾病特征基因
rfGenes=importance[order(importance[,"importance"], decreasing = TRUE),]
write.table(rfGenes, file="rfGenes.txt", sep="\t", quote=F, col.names=T, row.names=F)
#展示前20个基因的重要性
af=importance[1:20,]
View(af)
View(importance)
rev(sort(importance))
sort(importance)
names(importance)=c("Gene","rfGenes")
rev(sort(importance))
#展示前20个基因的重要性
af=importance[1:20,]
View(af)
#展示前20个基因的重要性
af=rfGenes[1:20,]
p=ggdotchart(rfGenes, x = "Gene", y = "importance",
color = "importance", # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
add.params = list(color = "lightgray", size = 2), # Change segment color and size
dot.size = 6,                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_bw()         ,               # ggplot2 theme
rotate=TRUE                                       )#翻转坐标轴
p=ggdotchart(af, x = "Gene", y = "importance",
color = "importance", # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
add.params = list(color = "lightgray", size = 2), # Change segment color and size
dot.size = 6,                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_bw()         ,               # ggplot2 theme
rotate=TRUE                                       )#翻转坐标轴
View(af)
p1=p+ geom_hline(yintercept = 0, linetype = 2, color = "lightgray")+
gradient_color(palette =c(ggsci::pal_npg()(2)[2],ggsci::pal_npg()(2)[1])      ) +#颜色
grids()
#保存图片
pdf(file="importance.pdf", width=6, height=6)
print(p1)
dev.off()
set.seed(12345)
library(glmnet)     #引用包
inputFile="diffGeneExp.txt"       #输入文件
#读取输入文件
rt=read.table(inputFile, header=T, sep="\t", check.names=F, row.names=1)
rt=t(rt)
#构建模型
x=as.matrix(rt)
y=gsub("(.*)\\_(.*)", "\\2", row.names(rt))
fit=glmnet(x, y, family = "binomial", alpha=1)
cvfit=cv.glmnet(x, y, family="binomial", alpha=1,type.measure='deviance',nfolds = 10)
#绘制Lasso回归的图形
pdf(file="lasso.pdf", width=6, height=5.5)
plot(fit)
dev.off()
#绘制交叉验证的图形
pdf(file="cvfit.pdf",width=6,height=5.5)
plot(cvfit)
dev.off()
#输出筛选的特征基因
coef=coef(fit, s=cvfit$lambda.min)
index=which(coef != 0)
lassoGene=row.names(coef)[index]
lassoGene=lassoGene[-1]
write.table(lassoGene, file="LASSO.gene.txt", sep="\t", quote=F, row.names=F, col.names=F)
#引用包
library(randomForest)
library(limma)
library(ggpubr)
set.seed(111)
inputFile="normalize.txt"       #输入文件
#读取输入文件
rt=read.table(inputFile, header=T, sep="\t", check.names=F)
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
data=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
data=avereps(data)
data=t(data)
data=data[,read.table("diffGenes.txt", header=F, sep="\t", check.names=F)[,1]]
sample=read.table("sample.txt",sep="\t",header=F,check.names=F,row.names = 1)
data=data[rownames(sample),]
colnames(data)=gsub("-", "afaf", colnames(data))
#控制组放置最前
afcon=as.matrix(table(sample[,1]))[1,1]
afcon=as.vector(afcon)
group=c(rep("con",afcon),rep("treat",nrow(data)-afcon))
#随机森林树
rf=randomForest(as.factor(group)~., data=data, ntree=500)
pdf(file="forest.pdf", width=6, height=6)
plot(rf, main="Random forest", lwd=2)
dev.off()
#找出误差最小的点
optionTrees=which.min(rf$err.rate[,1])
optionTrees
rf2=randomForest(as.factor(group)~., data=data, ntree=optionTrees)
#查看基因的重要性
#绘制基因的重要性图
importance=importance(x=rf2)
importance=as.data.frame(importance)
importance$size=rownames(importance)
importance=importance[,c(2,1)]
names(importance)=c("Gene","importance")
###af=importance[order(importance[,"importance"], decreasing = TRUE),]
#展示前20个基因的重要性
af=importance[1:20,]
p=ggdotchart(af, x = "Gene", y = "importance",
color = "importance", # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
add.params = list(color = "lightgray", size = 2), # Change segment color and size
dot.size = 6,                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_bw()         ,               # ggplot2 theme
rotate=TRUE                                       )#翻转坐标轴
p1=p+ geom_hline(yintercept = 0, linetype = 2, color = "lightgray")+
gradient_color(palette =c(ggsci::pal_npg()(2)[2],ggsci::pal_npg()(2)[1])      ) +#颜色
grids()
#保存图片
pdf(file="importance.pdf", width=6, height=6)
print(p1)
dev.off()
#挑选疾病特征基因
rfGenes=importance[order(importance[,"importance"], decreasing = TRUE),]
write.table(rfGenes, file="rfGenes.txt", sep="\t", quote=F, col.names=T, row.names=F)
#setwd("C:\\biowolf\\geoFRG\\12.SVM")      #设置工作目录
source("geoFRG12.msvmRFE.R")
inputFile="diffGeneExp.txt"     #输入文件
#setwd("C:\\biowolf\\geoFRG\\12.SVM")      #设置工作目录
source("geoFRG12.msvmRFE.R")
setwd("/Users/he/Desktop/代码/8.4个标志物/1.机器学习获得4个基因")
#install.packages("e1071")
#引用包
#set.seed(12345)
library(e1071)
inputFile="diffGeneExp.txt"     #输入文件
#setwd("C:\\biowolf\\geoFRG\\12.SVM")      #设置工作目录
source("geoFRG12.msvmRFE.R")
#读取输入文件
data=read.table(inputFile, header=T, sep="\t", check.names=F, row.names=1)
data=as.data.frame(t(data))
#获取样品的分组信息
group=gsub("(.*)\\_(.*)", "\\2", row.names(data))
data=cbind(group, data)
data$group=factor(data$group, levels=c("Control","Treat"))
#构建机器学习-支持向量机递归特征消除算法(SVM-RFE)
svmRFE(data, k=10, halve.above=10)
nfold=10
geneNum=nrow(data)
folds=rep(1:nfold, len=geneNum)[sample(geneNum)]
folds=lapply(1:nfold, function(x) which(folds == x))
results=lapply(folds, svmRFE.wrap, data, k=10, halve.above=10)
#对特征基因的重要性进行排序
top.features=WriteFeatures(results, data, save=F)
#输出排序的结果
write.table(top.features, file="feature_svm.txt", sep="\t", quote=F,row.names=F)
#交叉验证
featsweep=lapply(1:40, FeatSweep.wrap, results, data)
library(VennDiagram)      #引用包
install.packages("VennDiagram")
library(randomcoloR)
library(venn)
#install.packages("VennDiagram")
install.packages("venn")
library(venn)
#文件名
A="LASSO.gene"
B="randomforest"
C="SVM-RFE.gene"
#构建一个列表
geneList=list()
rt=read.table(paste0(A,".txt"),header=F,sep="\t",check.names=F)
geneNames=as.vector(rt[,1])
geneNames=gsub("^ | $","",geneNames)
uniqGene=unique(geneNames)
geneList[[A]]=uniqGene
uniqLength=length(uniqGene)
print(paste("1",uniqLength,sep=" "))
rt=read.table(paste0(B,".txt"),header=F,sep="\t",check.names=F)
geneNames=as.vector(rt[,1])
geneNames=gsub("^ | $","",geneNames)
uniqGene=unique(geneNames)
geneList[[B]]=uniqGene
uniqLength=length(uniqGene)
print(paste("3",uniqLength,sep=" "))
rt=read.table(paste0(C,".txt"),header=F,sep="\t",check.names=F)
geneNames=as.vector(rt[,1])
geneNames=gsub("^ | $","",geneNames)
uniqGene=unique(geneNames)
geneList[[C]]=uniqGene
uniqLength=length(uniqGene)
print(paste("3",uniqLength,sep=" "))
mycol <- distinctColorPalette(3)
pdf(file="venn.pdf",width=5,height=5)
venn(geneList,col=mycol[1:length(geneList)],zcolor=mycol[1:length(geneList)],box=F)
dev.off()
intersectGenes=Reduce(intersect,geneList)
write.table(file="interGenes.txt",intersectGenes,sep="\t",quote=F,col.names=F,row.names=F)
plot(nomogram(fit,fun.at = seq(0.05,0.95,0.05)),funlabel = "nomogram model")
#引用包
library(glmnet)
library(pROC)
expFile="diffGeneExp.txt"      #表达数据文件
geneFile="interGenes.txt"      #交集基因的列表文件
#读取输入文件
rt=read.table(expFile, header=T, sep="\t", check.names=F, row.names=1)
#获取样品的分组信息
y=gsub("(.*)\\_(.*)", "\\2", colnames(rt))
y=ifelse(y=="Control", 0, 1)
#读取基因的列表文件
geneRT=read.table(geneFile, header=F, sep="\t", check.names=F)
#对交集基因进行循环，绘制ROC曲线
bioCol=rainbow(nrow(geneRT), s=0.9, v=0.9)    #定义图形的颜色
aucText=c()
k=0
for(x in as.vector(geneRT[,1])){
k=k+1
#绘制ROC曲线
roc1=roc(y, as.numeric(rt[x,]))     #得到ROC曲线的参数
if(k==1){
pdf(file="ROC.genes.pdf", width=10, height=8)
plot(roc1, print.auc=F, col=bioCol[k], legacy.axes=T, main="")
aucText=c(aucText, paste0(x,", AUC=",sprintf("%.3f",roc1$auc[1])))
}else{
plot(roc1, print.auc=F, col=bioCol[k], legacy.axes=T, main="", add=TRUE)
aucText=c(aucText, paste0(x,", AUC=",sprintf("%.3f",roc1$auc[1])))
}
}
#绘制图例，得到ROC曲线下的面积
legend("bottomright", aucText, lwd=2, bty="n", col=bioCol[1:(ncol(rt)-1)])
dev.off()
#构建逻辑模型
rt=rt[as.vector(geneRT[,1]),]
rt=as.data.frame(t(rt))
logit=glm(y ~ ., family=binomial(link='logit'), data=rt)
pred=predict(logit, newx=rt)     #得到模型的打分
#绘制模型的ROC曲线
roc1=roc(y, as.numeric(pred))      #得到模型ROC曲线的参数
ci1=ci.auc(roc1, method="bootstrap")     #得到ROC曲线下面积的波动范围
ciVec=as.numeric(ci1)
pdf(file="ROC.model.pdf", width=5, height=4.75)
plot(roc1, print.auc=TRUE, col="red", legacy.axes=T, main="Model")
text(0.39, 0.43, paste0("95% CI: ",sprintf("%.03f",ciVec[1]),"-",sprintf("%.03f",ciVec[3])), col="red")
dev.off()
######Video source: https://ke.biowolf.cn
######Video source: https://ke.biowolf.cn
######生信自学网: https://www.biowolf.cn/
