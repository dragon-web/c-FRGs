treatData=data[,as.vector(treat[,1])]
data=cbind(conData, treatData)
conNum=ncol(conData)
treatNum=ncol(treatData)
#读取基因列表文件,提取疾病特征基因的表达量
geneRT=read.table(geneFile, header=F, sep="\t", check.names=F)
data=data[as.vector(geneRT[,1]),,drop=F]
#设置比较组
Type=c(rep("Control",conNum), rep("Treat",treatNum))
my_comparisons=list()
my_comparisons[[1]]=levels(factor(Type))
#对基因进行循环，绘制差异箱线图
for(i in row.names(data)){
#data[i,][data[i,]>quantile(data[i,], 0.99)]=quantile(data[i,], 0.99)
rt1=data.frame(expression=data[i,], Type=Type)
#对差异基因进行可视化，绘制箱线图
boxplot=ggboxplot(rt1, x="Type", y="expression", color="Type",
xlab="",
ylab=paste(i, "expression"),
legend.title="",
palette = c("blue", "red"),
add = "jitter")+
#stat_compare_means(comparisons = my_comparisons,symnum.args=list(cutpoints=c(0, 0.001, 0.01, 0.05, 1), symbols=c("***", "**", "*", "ns")), label="p.signif")
stat_compare_means(comparisons = my_comparisons)
#输出图片
pdf(file=paste0("boxplot.",i,".pdf"), width=5, height=4.5)
print(boxplot)
dev.off()
}
######Video source: https://ke.biowolf.cn
######生信自学网: https://www.biowolf.cn/
######微信公众号：biowolf_cn
######合作邮箱：biowolf@foxmail.com
######答疑微信520221056
setwd("~/Desktop/OAOAOAOAOA/OA-gpl96-cup-ferroptosis-end/5.GSE82107")
######Video source: https://ke.biowolf.cn
######生信自学网: https://www.biowolf.cn/
######微信公众号：biowolf_cn
######合作邮箱：biowolf@foxmail.com
######答疑微信: 18520221056
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("limma")
#install.packages("ggpubr")
#引用包
library(limma)
library(ggpubr)
expFile="GSE82107.txt"      #表达数据文件
geneFile="interGenes.txt"     #基因列表文件
conFile="s1.txt"              #对照组的样品信息文件
treatFile="s2.txt"            #实验组的样品信息文件
#setwd("C:\\biowolf\\geoFRG\\26.testDiff")     #设置工作目录
#读取表达数据文件
rt=read.table(expFile, header=T, sep="\t", check.names=F)
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp), colnames(exp))
data=matrix(as.numeric(as.matrix(exp)), nrow=nrow(exp), dimnames=dimnames)
rt=avereps(data)
#如果数据没有取log2,会对数据自动取log2
qx=as.numeric(quantile(rt, c(0, 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC=( (qx[5]>100) || ( (qx[6]-qx[1])>50 && qx[2]>0) )
if(LogC){
rt[rt<0]=0
rt=log2(rt+1)}
data=normalizeBetweenArrays(rt)
#读取样品信息文件，判断样品的类型
con=read.table(conFile, header=F, sep="\t", check.names=F)
treat=read.table(treatFile, header=F, sep="\t", check.names=F)
conData=data[,as.vector(con[,1])]
treatData=data[,as.vector(treat[,1])]
data=cbind(conData, treatData)
conNum=ncol(conData)
treatNum=ncol(treatData)
#读取基因列表文件,提取疾病特征基因的表达量
geneRT=read.table(geneFile, header=F, sep="\t", check.names=F)
data=data[as.vector(geneRT[,1]),,drop=F]
#设置比较组
Type=c(rep("Control",conNum), rep("Treat",treatNum))
my_comparisons=list()
my_comparisons[[1]]=levels(factor(Type))
#对基因进行循环，绘制差异箱线图
for(i in row.names(data)){
#data[i,][data[i,]>quantile(data[i,], 0.99)]=quantile(data[i,], 0.99)
rt1=data.frame(expression=data[i,], Type=Type)
#对差异基因进行可视化，绘制箱线图
boxplot=ggboxplot(rt1, x="Type", y="expression", color="Type",
xlab="",
ylab=paste(i, "expression"),
legend.title="",
palette = c("blue", "red"),
add = "jitter")+
#stat_compare_means(comparisons = my_comparisons,symnum.args=list(cutpoints=c(0, 0.001, 0.01, 0.05, 1), symbols=c("***", "**", "*", "ns")), label="p.signif")
stat_compare_means(comparisons = my_comparisons)
#输出图片
pdf(file=paste0("boxplot.",i,".pdf"), width=5, height=4.5)
print(boxplot)
dev.off()
}
######Video source: https://ke.biowolf.cn
######生信自学网: https://www.biowolf.cn/
######微信公众号：biowolf_cn
######合作邮箱：biowolf@foxmail.com
######答疑微信520221056
######Video source: https://ke.biowolf.cn
######生信自学网: https://www.biowolf.cn/
######微信公众号：biowolf_cn
######合作邮箱：biowolf@foxmail.com
######答疑微信: 18520221056
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("limma")
#install.packages("ggpubr")
#引用包
library(limma)
library(ggpubr)
expFile="GSE82107.txt"      #表达数据文件
geneFile="interGenes.txt"     #基因列表文件
conFile="s1.txt"              #对照组的样品信息文件
treatFile="s2.txt"            #实验组的样品信息文件
#setwd("C:\\biowolf\\geoFRG\\26.testDiff")     #设置工作目录
#读取表达数据文件
rt=read.table(expFile, header=T, sep="\t", check.names=F)
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp), colnames(exp))
data=matrix(as.numeric(as.matrix(exp)), nrow=nrow(exp), dimnames=dimnames)
rt=avereps(data)
#如果数据没有取log2,会对数据自动取log2
qx=as.numeric(quantile(rt, c(0, 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC=( (qx[5]>100) || ( (qx[6]-qx[1])>50 && qx[2]>0) )
if(LogC){
rt[rt<0]=0
rt=log2(rt+1)}
data=normalizeBetweenArrays(rt)
#读取样品信息文件，判断样品的类型
con=read.table(conFile, header=F, sep="\t", check.names=F)
treat=read.table(treatFile, header=F, sep="\t", check.names=F)
conData=data[,as.vector(con[,1])]
treatData=data[,as.vector(treat[,1])]
data=cbind(conData, treatData)
conNum=ncol(conData)
treatNum=ncol(treatData)
#读取基因列表文件,提取疾病特征基因的表达量
geneRT=read.table(geneFile, header=F, sep="\t", check.names=F)
data=data[as.vector(geneRT[,1]),,drop=F]
#设置比较组
Type=c(rep("Control",conNum), rep("Treat",treatNum))
my_comparisons=list()
my_comparisons[[1]]=levels(factor(Type))
#对基因进行循环，绘制差异箱线图
for(i in row.names(data)){
#data[i,][data[i,]>quantile(data[i,], 0.99)]=quantile(data[i,], 0.99)
rt1=data.frame(expression=data[i,], Type=Type)
#对差异基因进行可视化，绘制箱线图
boxplot=ggboxplot(rt1, x="Type", y="expression", color="Type",
xlab="",
ylab=paste(i, "expression"),
legend.title="",
palette = c("blue", "red"),
add = "jitter")+
#stat_compare_means(comparisons = my_comparisons,symnum.args=list(cutpoints=c(0, 0.001, 0.01, 0.05, 1), symbols=c("***", "**", "*", "ns")), label="p.signif")
stat_compare_means(comparisons = my_comparisons)
#输出图片
pdf(file=paste0("boxplot.",i,".pdf"), width=5, height=4.5)
print(boxplot)
dev.off()
}
######Video source: https://ke.biowolf.cn
######生信自学网: https://www.biowolf.cn/
######微信公众号：biowolf_cn
######合作邮箱：biowolf@foxmail.com
######答疑微信520221056
#install.packages("caret")
#install.packages("DALEX")
#install.packages("ggplot2")
#install.packages("randomForest")
#install.packages("kernlab")
#install.packages("pROC")
#install.packages("xgboost")
#引用包
library(caret)
library(DALEX)
library(ggplot2)
library(randomForest)
library(kernlab)
library(xgboost)
library(pROC)
set.seed(123)      #设置种子
inputFile="test.normalize.txt"         #表达数据文件
geneFile="interGenes.txt"      #基因列表文件
#setwd("C:\\biowolf\\geoCRG\\25.testROC")      #设置工作目录
#读取表达数据文件
data=read.table(inputFile, header=T, sep="\t", check.names=F, row.names=1)
row.names(data)=gsub("-", "_", row.names(data))
#读取基因列表文件, 提取疾病特征基因的表达量
geneRT=read.table(geneFile, header=T, sep="\t", check.names=F)
data=data[as.vector(geneRT[,1]),]
#获取样品分组信息
data=t(data)
group=gsub("(.*)\\_(.*)", "\\2", row.names(data))
data=as.data.frame(data)
data$Type=group
#对数据进行分组
inTrain<-createDataPartition(y=data$Type, p=0.7, list=F)
train<-data[inTrain,]
test<-data[-inTrain,]
#选择模型
control=trainControl(method="repeatedcv", number=8, savePredictions=TRUE)
if(geneFile=="interGenes.txt"){
#随机森林树模型
model=train(Type ~ ., data = train, method='rf', trControl = control)
}else if(geneFile=="interGenes.txt"){
}
#绘制ROC曲线
yTest=ifelse(test$Type=="Control", 0, 1)
pred1=predict(model, newdata=test, type="prob")
roc1=roc(yTest, as.numeric(pred1[,2]))
ci1=ci.auc(roc1, method="bootstrap")
ciVec=as.numeric(ci1)
pdf(file="ROC.pdf", width=5, height=5)
plot(roc1, print.auc=T, legacy.axes=T, main="", col="red")
text(0.39, 0.43, paste0("95% CI: ",sprintf("%.03f",ciVec[1]),"-",sprintf("%.03f",ciVec[3])), col="red")
dev.off()
######Video source: https://ke.biowolf.cn
######生信自学网: https://www.biowolf.cn/
######微信公众号：biowolf_cn
######合作邮箱：biowolf@foxmail.com
######答疑微信: 18520221056
######Video source: https://ke.biowolf.cn
######生信自学网: https://www.biowolf.cn/
######微信公众号：biowolf_cn
######合作邮箱：biowolf@foxmail.com
######答疑微信: 18520221056
#install.packages("glmnet")
#install.packages("pROC")
#引用包
library(glmnet)
library(pROC)
expFile="test.normalize.txt"      #表达数据文件
geneFile="interGenes.txt"      #交集基因的列表文件
#setwd("C:\\biowolf\\geoFRG\\14.ROC")    #设置工作目录
#读取输入文件
rt=read.table(expFile, header=T, sep="\t", check.names=F, row.names=1)
#获取样品的分组信息
y=gsub("(.*)\\_(.*)", "\\2", colnames(rt))
y=ifelse(y=="Control", 0, 1)  #
#读取基因的列表文件
geneRT=read.table(geneFile, header=F, sep="\t", check.names=F)
#对交集基因进行循环，绘制ROC曲线
bioCol=rainbow(nrow(geneRT), s=0.9, v=0.9)    #定义图形的颜色
aucText=c()
k=0
for(x in as.vector(geneRT[,1])){
k=k+1
#绘制ROC曲线
roc1=roc(y, as.numeric(rt[x,]))     #得到ROC曲线的参数
if(k==1){
pdf(file="ROC.genes-test.pdf", width=5, height=4.75)
plot(roc1, print.auc=F, col=bioCol[k], legacy.axes=T, main="")
aucText=c(aucText, paste0(x,", AUC=",sprintf("%.3f",roc1$auc[1])))
}else{
plot(roc1, print.auc=F, col=bioCol[k], legacy.axes=T, main="", add=TRUE)
aucText=c(aucText, paste0(x,", AUC=",sprintf("%.3f",roc1$auc[1])))
}
}
#绘制图例，得到ROC曲线下的面积
legend("bottomright", aucText, lwd=2, bty="n", col=bioCol[1:(ncol(rt)-1)])
dev.off()
#构建逻辑模型
rt=rt[as.vector(geneRT[,1]),]
rt=as.data.frame(t(rt))
logit=glm(y ~ ., family=binomial(link='logit'), data=rt)
pred=predict(logit, newx=rt)     #得到模型的打分
#install.packages("caret")
#install.packages("DALEX")
#install.packages("ggplot2")
#install.packages("randomForest")
#install.packages("kernlab")
#install.packages("pROC")
#install.packages("xgboost")
#引用包
library(caret)
library(DALEX)
library(ggplot2)
library(randomForest)
library(kernlab)
library(xgboost)
library(pROC)
set.seed(123)      #设置种子
inputFile="test.normalize.txt"         #表达数据文件
geneFile="interGenes.txt"      #基因列表文件
#setwd("C:\\biowolf\\geoCRG\\25.testROC")      #设置工作目录
#读取表达数据文件
data=read.table(inputFile, header=T, sep="\t", check.names=F, row.names=1)
row.names(data)=gsub("-", "_", row.names(data))
#读取基因列表文件, 提取疾病特征基因的表达量
geneRT=read.table(geneFile, header=T, sep="\t", check.names=F)
data=data[as.vector(geneRT[,1]),]
#获取样品分组信息
data=t(data)
group=gsub("(.*)\\_(.*)", "\\2", row.names(data))
data=as.data.frame(data)
data$Type=group
#对数据进行分组
inTrain<-createDataPartition(y=data$Type, p=0.7, list=F)
train<-data[inTrain,]
test<-data[-inTrain,]
#选择模型
control=trainControl(method="repeatedcv", number=8, savePredictions=TRUE)
if(geneFile=="interGenes.txt"){
#随机森林树模型
model=train(Type ~ ., data = train, method='rf', trControl = control)
}else if(geneFile=="interGenes.txt"){
}
#绘制ROC曲线
yTest=ifelse(test$Type=="Control", 0, 1)
pred1=predict(model, newdata=test, type="prob")
roc1=roc(yTest, as.numeric(pred1[,2]))
ci1=ci.auc(roc1, method="bootstrap")
ciVec=as.numeric(ci1)
pdf(file="ROC.pdf", width=5, height=5)
plot(roc1, print.auc=T, legacy.axes=T, main="", col="red")
text(0.39, 0.43, paste0("95% CI: ",sprintf("%.03f",ciVec[1]),"-",sprintf("%.03f",ciVec[3])), col="red")
dev.off()
######Video source: https://ke.biowolf.cn
######生信自学网: https://www.biowolf.cn/
######微信公众号：biowolf_cn
######合作邮箱：biowolf@foxmail.com
######答疑微信: 18520221056
######Video source: https://ke.biowolf.cn
######生信自学网: https://www.biowolf.cn/
######微信公众号：biowolf_cn
######合作邮箱：biowolf@foxmail.com
######答疑微信: 18520221056
#install.packages("glmnet")
#install.packages("pROC")
#引用包
library(glmnet)
library(pROC)
expFile="test.normalize.txt"      #表达数据文件
geneFile="interGenes.txt"      #交集基因的列表文件
#setwd("C:\\biowolf\\geoFRG\\14.ROC")    #设置工作目录
#读取输入文件
rt=read.table(expFile, header=T, sep="\t", check.names=F, row.names=1)
#获取样品的分组信息
y=gsub("(.*)\\_(.*)", "\\2", colnames(rt))
y=ifelse(y=="Control", 0, 1)  #
#读取基因的列表文件
geneRT=read.table(geneFile, header=F, sep="\t", check.names=F)
#对交集基因进行循环，绘制ROC曲线
bioCol=rainbow(nrow(geneRT), s=0.9, v=0.9)    #定义图形的颜色
aucText=c()
k=0
for(x in as.vector(geneRT[,1])){
k=k+1
#绘制ROC曲线
roc1=roc(y, as.numeric(rt[x,]))     #得到ROC曲线的参数
if(k==1){
pdf(file="ROC.genes-test.pdf", width=5, height=4.75)
plot(roc1, print.auc=F, col=bioCol[k], legacy.axes=T, main="")
aucText=c(aucText, paste0(x,", AUC=",sprintf("%.3f",roc1$auc[1])))
}else{
plot(roc1, print.auc=F, col=bioCol[k], legacy.axes=T, main="", add=TRUE)
aucText=c(aucText, paste0(x,", AUC=",sprintf("%.3f",roc1$auc[1])))
}
}
#绘制图例，得到ROC曲线下的面积
legend("bottomright", aucText, lwd=2, bty="n", col=bioCol[1:(ncol(rt)-1)])
dev.off()
#构建逻辑模型
rt=rt[as.vector(geneRT[,1]),]
rt=as.data.frame(t(rt))
logit=glm(y ~ ., family=binomial(link='logit'), data=rt)
pred=predict(logit, newx=rt)     #得到模型的打分
######Video source: https://ke.biowolf.cn
######生信自学网: https://www.biowolf.cn/
######微信公众号：biowolf_cn
######合作邮箱：biowolf@foxmail.com
######答疑微信: 18520221056
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("limma")
library(limma)               #引用包
expFile="geneMatrix.txt"     #表达数据文件
conFile="s1.txt"             #对照组样品文件
treatFile="s2.txt"           #实验组样品文件
#setwd("C:\\biowolf\\geoCRG\\24.testNormalize")      #设置工作目录
#读取输入文件，并对输入文件整理
rt=read.table(expFile, header=T, sep="\t", check.names=F)
expFile="GSE82107.txt"     #表达数据文件
conFile="s1.txt"             #对照组样品文件
treatFile="s2.txt"           #实验组样品文件
#读取输入文件，并对输入文件整理
rt=read.table(expFile, header=T, sep="\t", check.names=F)
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
data=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
data=avereps(data)
#读取对照组样品文件,提取对照组的表达数据
s1=read.table(conFile, header=F, sep="\t", check.names=F)
sampleName1=as.vector(s1[,1])
conData=data[,sampleName1]
#读取实验组样品文件,提取实验组的表达数据
s2=read.table(treatFile, header=F, sep="\t", check.names=F)
sampleName2=as.vector(s2[,1])
treatData=data[,sampleName2]
#数据合并
rt=cbind(conData, treatData)
#如果数据没有取log2,会对数据自动取log2
qx=as.numeric(quantile(rt, c(0, 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC=( (qx[5]>100) || ( (qx[6]-qx[1])>50 && qx[2]>0) )
if(LogC){
rt[rt<0]=0
rt=log2(rt+1)}
data=normalizeBetweenArrays(rt)
#输出矫正后的表达数据, 同时在样品名字后面加上样品的分组信息
conNum=ncol(conData)
treatNum=ncol(treatData)
Type=c(rep("Control",conNum),rep("Treat",treatNum))
outData=rbind(id=paste0(colnames(data),"_",Type),data)
write.table(outData, file="test.normalize.txt", sep="\t", quote=F, col.names=F)
######Video source: https://ke.biowolf.cn
######Video source: https://ke.biowolf.cn
######生信自学网: https://www.biowolf.cn/
######Video source: https://ke.biowolf.cn
######生信自学网: https://www.biowolf.cn/
######微信公众号：biowolf_cn
#引用包
library(caret)
library(DALEX)
library(ggplot2)
library(randomForest)
library(kernlab)
library(xgboost)
library(pROC)
set.seed(123)      #设置种子
inputFile="test.normalize.txt"         #表达数据文件
geneFile="interGenes.txt"      #基因列表文件
#读取表达数据文件
data=read.table(inputFile, header=T, sep="\t", check.names=F, row.names=1)
row.names(data)=gsub("-", "_", row.names(data))
#读取基因列表文件, 提取疾病特征基因的表达量
geneRT=read.table(geneFile, header=T, sep="\t", check.names=F)
data=data[as.vector(geneRT[,1]),]
#获取样品分组信息
data=t(data)
group=gsub("(.*)\\_(.*)", "\\2", row.names(data))
data=as.data.frame(data)
data$Type=group
#对数据进行分组
inTrain<-createDataPartition(y=data$Type, p=0.7, list=F)
train<-data[inTrain,]
test<-data[-inTrain,]
#选择模型
control=trainControl(method="repeatedcv", number=8, savePredictions=TRUE)
if(geneFile=="interGenes.txt"){
#随机森林树模型
model=train(Type ~ ., data = train, method='rf', trControl = control)
}else if(geneFile=="interGenes.txt"){
}
#绘制ROC曲线
yTest=ifelse(test$Type=="Control", 0, 1)
pred1=predict(model, newdata=test, type="prob")
roc1=roc(yTest, as.numeric(pred1[,2]))
ci1=ci.auc(roc1, method="bootstrap")
ciVec=as.numeric(ci1)
pdf(file="ROC.pdf", width=5, height=5)
plot(roc1, print.auc=T, legacy.axes=T, main="", col="red")
text(0.39, 0.43, paste0("95% CI: ",sprintf("%.03f",ciVec[1]),"-",sprintf("%.03f",ciVec[3])), col="red")
dev.off()
#引用包
library(glmnet)
library(pROC)
expFile="test.normalize.txt"      #表达数据文件
geneFile="interGenes.txt"      #交集基因的列表文件
#读取输入文件
rt=read.table(expFile, header=T, sep="\t", check.names=F, row.names=1)
#获取样品的分组信息
y=gsub("(.*)\\_(.*)", "\\2", colnames(rt))
y=ifelse(y=="Control", 0, 1)  #
#读取基因的列表文件
geneRT=read.table(geneFile, header=F, sep="\t", check.names=F)
#对交集基因进行循环，绘制ROC曲线
bioCol=rainbow(nrow(geneRT), s=0.9, v=0.9)    #定义图形的颜色
aucText=c()
k=0
for(x in as.vector(geneRT[,1])){
k=k+1
#绘制ROC曲线
roc1=roc(y, as.numeric(rt[x,]))     #得到ROC曲线的参数
if(k==1){
pdf(file="ROC.genes-test.pdf", width=5, height=4.75)
plot(roc1, print.auc=F, col=bioCol[k], legacy.axes=T, main="")
aucText=c(aucText, paste0(x,", AUC=",sprintf("%.3f",roc1$auc[1])))
}else{
plot(roc1, print.auc=F, col=bioCol[k], legacy.axes=T, main="", add=TRUE)
aucText=c(aucText, paste0(x,", AUC=",sprintf("%.3f",roc1$auc[1])))
}
}
#绘制图例，得到ROC曲线下的面积
legend("bottomright", aucText, lwd=2, bty="n", col=bioCol[1:(ncol(rt)-1)])
dev.off()
#构建逻辑模型
rt=rt[as.vector(geneRT[,1]),]
rt=as.data.frame(t(rt))
logit=glm(y ~ ., family=binomial(link='logit'), data=rt)
pred=predict(logit, newx=rt)     #得到模型的打分
